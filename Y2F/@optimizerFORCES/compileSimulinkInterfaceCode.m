function compileSimulinkInterfaceCode( self )
%COMPILESIMULINKINTERFACECODE Compiles the MEX code generated by
%GENERATESIMULINKINTERFACECODE. Important: This function has to be called
%AFTER COMPILESOLVERINTERFACECODE.
%
% This file is part of the y2f project: http://github.com/embotech/y2f, 
% a project maintained by embotech under the MIT open-source license.
%
% (c) Gian Ulli and embotech GmbH, Zurich, Switzerland, 2013-2016.

solverName = self.default_codeoptions.name;
cName = [solverName '/interface/' solverName];
simulinkName = [solverName '/interface/' solverName '_simulinkBlock'];
outputName = ['"' solverName '_simulinkBlock"'];

% copy the O-files of all solvers into /interface
% we'll delete them later, but this makes compilation easier
for i=1:self.numSolvers
    if( ~ispc )
        copyfile(sprintf('%s/obj/%s.o',solverName,self.codeoptions{i}.name), sprintf('%s/interface',solverName), 'f');
    end
end

% final MEX build
if exist( [cName '.c'], 'file' ) && exist( [simulinkName '.c'], 'file' )
    if( ~exist([solverName '/interface/' solverName '.obj'],'file') )
        mex('-c','-g','-silent','-outdir',[solverName '/interface'],[cName '.c']) % compile C interface
    end
    mex('-c','-g','-silent','-outdir',[solverName '/interface'],[simulinkName '.c']) % compile Simulink interface
    if( ispc ) % PC - we need additional libraries
        
        % Create a list of internal solver libraries
        if( exist([solverName,filesep,'lib'],'dir') )
            libs = cell(1,self.numSolvers);
            for i=1:self.numSolvers
                lib = dir([solverName,filesep,'lib/',self.codeoptions{i}.name,'*.lib']);
                if length(lib)>1
                    % fix for new server which produces shared and static
                    % libraries, so we have more than 1 library found above
                    lib = dir([solverName,filesep,'lib/',self.codeoptions{i}.name,'_static.lib']);
                end
                libs{i} = ['-l' lib.name(1:end-4)];
            end
        end
        
        % figure our whether we need additional libraries indeed (Intel)
        clientPath = fileparts(which('generateCode'));
        intelLibsDir = [clientPath,filesep,'libs_intel'];
        if( exist( intelLibsDir, 'dir' ) )
            intelLibsDirFlag = ['-L', intelLibsDir];
            addpath(intelLibsDir); savepath;
        else
            intelLibsDirFlag = '';
        end
        
        % Figure out whether we need legacy libraries for Visual Studio        
        try
            thisCompiler = mex.getCompilerConfigurations('C','Selected');
            mexcomp.name = thisCompiler(1).Name;
            mexcomp.ver = thisCompiler(1).Version;
            mexcomp.vendor = thisCompiler(1).Manufacturer;
        catch
            mexcomp = [];
        end
        if( ~isempty(mexcomp) ...
           && ~isempty(strfind(mexcomp.vendor,'Microsoft')) ...
           && str2double(mexcomp.ver) >= 14.0 )
           legacyLibs = '-llegacy_stdio_definitions';
        else
           legacyLibs = '';
        end
        
        % Call mex compiler
        if( exist([solverName,filesep,'lib'],'dir') )
            mex([solverName '/interface/' solverName '.obj'], ...
                [solverName '/interface/' solverName '_simulinkBlock.obj'], ...
                '-output', outputName, ...
                ['-L' solverName '/lib'], libs{:}, intelLibsDirFlag, ...
                '-ldecimal', '-lirc', '-lmmt', '-lsvml_dispmt', ...
                legacyLibs, '-lIPHLPAPI.lib', '-largeArrayDims','-silent');
        else
            % it seems that we have been compiling with VS only,
            % so we do not add the Intel libs and use only object files
            mex([solverName, '/interface/' solverName '.obj'], ...
                [solverName, '/interface/' solverName '_simulinkBlock.obj'], ...
                [solverName '/obj/*.obj'], '-lIPHLPAPI.lib', legacyLibs, ...
                '-output', [outputName(2:end-1),'.',mexext],'-silent');
        end
        % delete([solverName '/interface/*.obj']);
    elseif( ismac )
        mex([solverName '/interface/*.o'], '-output', outputName, '-silent') 
        delete([solverName '/interface/*.o']);
    else % we're on a linux system
        mex([solverName '/interface/*.o'], '-output', outputName,'-lrt', '-silent') 
        delete([solverName '/interface/*.o']);
    end
else
    fprintf('Could not find source file. This file is meant to be used for building from source code.');
end

end

